local numberOfMonsterButtons = 0
local disableSave = true

-- All the scripted monster setups by monster card, sleeve, and bag, combat

local monsterTrackerLocations = {
  {
    {21.000,3.000,-12.124},
    {21.000,1.931,-12.124},
    {26.964,1.516,-12.124},
    {12.250,1.701,-12.124}
  },
  {
    {38.500,3.000,-12.124},
    {38.500,1.931,-12.124},
    {32.471,1.516,-12.124},
    {45.500,1.701,-12.124}
  },
  {
    {21.000,3.000,-3.031},
    {21.00,1.931,-3.031},
    {26.964,1.516,-3.031},
    {12.250,1.701,-3.031}
  },
  {
    {38.500,3.000,-3.031},
    {38.500,1.931,-3.031},
    {32.271,1.516,-3.031},
    {45.500,1.701,-3.031}
  },
  {
    {21.000,3.000,6.062},
    {21.000,1.931,6.062},
    {26.964,1.516,6.062},
    {12.250,1.701,6.062}
  },
  {
    {38.500,3.000,6.062},
    {38.500,1.931,6.062},
    {32.271,1.516,6.062},
    {45.500,1.701,6.062}
  },
  {
    {21.000,3.000,15.155},
    {21.000,1.931,15.155},
    {26.964,1.516,15.155},
    {12.250,1.701,15.155}
  },
  {
    {38.500,3.000,15.155},
    {38.500,1.931,15.155},
    {32.271,1.516,15.155},
    {45.500,1.701,15.155}
  },
}

local monsterGuids = {
  "e3f332","9df9ca","c730cd","97daa4","004793",
  "b0757d","9f4882","be991d","619a40","55b126",
  "c0af27","78036b","ba1b23","7d713c","c9454d",
  "d08a41","a3f91a","7b6374","57c0fb","be4385",
  "8acbc8","841e56","313763","2d92b3","da2b6b",
  "a3575a","b31da3","83f1b7","91445c","3f32fa",
  "d8a4d7","908ebf","d13465","66baf8","b68dac",
  "1c1ea2","1ad39b","5f3a8f","fc3ee6","c0e253",
  "b3d0b0","39fba9","3346ba","34ec74","d98f27",
  "bcc9e3","189219"
}

-- Monster details
local monsters = {
  {
    Name = "Bandit Guard",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Bandit Archer",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "City Guard",
    CardRotations = {{0,90,0},{0,0,0},{0,270,0},{0,180,0},{0,0,180},{0,270,180},{0,180,180},{0,90,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "City Archer",
    CardRotations = {{0,90,0},{0,0,0},{0,270,0},{0,180,0},{0,0,180},{0,270,180},{0,180,180},{0,90,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Inox Archer",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Inox Shaman",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Inox Guard",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Vermling Shaman",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Vermling Scout",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 10
  },
  {
    Name = "Living Bones",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 10
  },
  {
    Name = "Living Corpse",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Living Spirit",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Flame Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Cultist",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Eart Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Frost Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Night Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Wind Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Giant Viper",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Sun Demon",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Cave Bear",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 4
  },
  {
    Name = "Ooze",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 10
  },
  {
    Name = "Forest Imp",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Ancient Artillery",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Stone Golem",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Deep Terror",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 10
  },
  {
    Name = "Rending Drake",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Spitting Drake",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1.75,1,1.75},
    NumOfSpawns = 6
  },
  {
    Name = "Lurker",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Black Imp",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 10
  },
  {
    Name = "Savvas Lavaflow",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Savvas Icestorm",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Harrower Infester",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  },
  {
    Name = "Hound",
    CardRotations = {{0,180,0},{0,90,0},{0,0,0},{0,270,0},{0,180,180},{0,90,180},{0,0,180},{0,270,180}},
    CardScale = {1,1,1},
    NumOfSpawns = 6
  }
-- TODO: Add boses
}

function updateSave()
  if not disableSave then
    local data_to_save = {["ml"]=memoryList}
    saved_data = JSON.encode(data_to_save)
    self.script_state = saved_data
  end
end

function onload()
  if not disableSave and saved_data ~= nil and saved_data ~= "" then
    local loaded_data = JSON.decode(saved_data)
    --Set up information off of loaded_data
    memoryList = loaded_data.ml
  else
    --Set up information for if there is no saved saved data
    memoryList = {}
  end

  if next(memoryList) == nil then
    createSetupButton()
  else
    initializeScenario()
  end
end

function createSetupButton()
  self.createButton({
      label="Start Tool", click_function="toolManager", function_owner=self,
      position={0,0.3,-2}, rotation={0,180,0}, height=350, width=1500,
      font_size=250
  })
end

function initializeScenario()
  self.createButton({
      label="Initialize Scenario", click_function="scenarioInitializer", function_owner=self,
      position={0,0.3,-2}, rotation={0,180,0}, height=350, width=2000,
      font_size=250
  })
end

function toolManager()
  memoryListBackup = duplicateTable(memoryList)
  memoryList = {}
  enableMonsterSelector()
end

function scenarioInitializer()
  self.clearButtons()
  broadcastToAll("Select your scenario Level", {1,1,1,1})

  self.createButton({
    label="0", click_function="confirmScenarioLevel", function_owner=self,
    position={0,0.3,-2}, rotation={0,180,0}, height=350, width=350,
    font_size=250
  })

  self.createButton({
    label=">", click_function="decreaseScenarioLevel", function_owner=self,
    position = {1,0.3,-2}, rotate={0,0,0}, height=350, width=350, font_size=250
  })

  self.createButton({
    label="<", click_function="increaseScenarioLevel", function_owner=self,
    position = {-1,0.3,-2}, rotate={0,0,0}, height=350, width=350, font_size=250
  })
end

function confirmScenarioLevel()
  local button = getScenarioButtonTable()
  placeObjects(tonumber(button.label))
end

function increaseScenarioLevel()
  local button = getScenarioButtonTable()
  local newLevel = tonumber(button.label) + 1

  if newLevel < 8 then
    self.editButton({index = button.index, label = tostring(newLevel)})
  end
end

function decreaseScenarioLevel()
  local button = getScenarioButtonTable()
  local newLevel = tonumber(button.label) - 1

  if newLevel > -1 then
    self.editButton({index = button.index, label = tostring(newLevel)})
  end
end

function enableMonsterSelector()
  self.clearButtons()
  local howManyButtons = 0
  for monsterNumber = 1,47 do
    local dummyIndex = howManyButtons
    --On a normal bag, the button positions aren't the same size as the bag.
    globalScaleFactor = 1.25 * 1/self.getScale().x
    --Super sweet math to set button positions
    local obj = getObjectFromGUID(monsterGuids[monsterNumber])
    local selfPos = self.getPosition()
    local objPos = obj.getPosition()
    local deltaPos = findOffsetDistance(selfPos, objPos, obj)
    local objPos = rotateLocalCoordinates(deltaPos, self)
    objPos.x = -objPos.x * globalScaleFactor
    objPos.y = objPos.y * globalScaleFactor
    objPos.z = objPos.z * globalScaleFactor
    --Offset rotation of bag
    local rot = self.getRotation()
    rot.y = -rot.y + 180
    --Create function
    local funcName = "selectButton_" .. howManyButtons
    local func = function() buttonClick_selection(dummyIndex, obj) end
    self.setVar(funcName, func)
    self.createButton({
      click_function=funcName, function_owner=self,
      position=objPos, rotation=rot, height=1000, width=1000,
      color={0.75,0.25,0.25,0.6},
    })
    howManyButtons = howManyButtons + 1
  end

  self.createButton({
      label="Confirm Monsters", click_function="initializeButtonForSearch", function_owner=self,
      position={0,0.3,-2}, rotation={0,180,0}, height=350, width=2000,
      font_size=250
  })
end

function initializeButtonForSearch()
  self.clearButtons()

  for k, v in pairs(memoryList) do
    local obj = getObjectFromGUID(k)
    obj.highlightOff()
  end

  self.createButton({
      label="Search for map", click_function="searchForTiles", function_owner=self,
      position={0,0.3,-2}, rotation={0,180,0}, height=350, width=2000,
      font_size=250
  })
end

function searchForTiles()
  self.clearButtons()
  local howManyButtons = 0
  for _, obj in ipairs(getAllObjects()) do
    if obj ~= self and isItemInArea(obj) then
      local dummyIndex = howManyButtons
      --On a normal bag, the button positions aren't the same size as the bag.
      globalScaleFactor = 1.25 * 1/self.getScale().x
      --Super sweet math to set button positions
      local selfPos = self.getPosition()
      local objPos = obj.getPosition()
      local deltaPos = findOffsetDistance(selfPos, objPos, obj)
      local objPos = rotateLocalCoordinates(deltaPos, self)
      objPos.x = -objPos.x * globalScaleFactor
      objPos.y = objPos.y * globalScaleFactor
      objPos.z = objPos.z * globalScaleFactor
      --Offset rotation of bag
      local rot = self.getRotation()
      rot.y = -rot.y + 180
      --Create function
      local funcName = "selectButton_" .. howManyButtons
      local func = function() mapButtonClick_selection(dummyIndex, obj) end
      self.setVar(funcName, func)
      self.createButton({
        click_function=funcName, function_owner=self,
        position=objPos, rotation=rot, height=1000, width=1000,
        color={0.75,0.25,0.25,0.6},
      })
      howManyButtons = howManyButtons + 1
    end
  end

  self.createButton({
      label="Confirm Selection", click_function="confirmSelection", function_owner=self,
      position={0,0.3,-2}, rotation={0,180,0}, height=350, width=2000,
      font_size=250
  })
end

--Saves selections
function confirmSelection()
  if next(memoryList) == nil then
    broadcastToAll("You cannot submit without any selections.", {0.75, 0.25, 0.25})
  else
    self.clearButtons()
    initializeScenario()
    local count = 0
    for guid in pairs(memoryList) do
      count = count + 1
      local obj = getObjectFromGUID(guid)
      if obj ~= nil then obj.highlightOff() end
    end
    broadcastToAll("Objects Saved", {1,1,1})
    updateSave()
    recallObjects()
  end
end

--Sends objects from bag/table to their saved position/rotation
function placeObjects(currLevel)
  local bagObjList = self.getObjects()
  local currMonsterIndex = 1

  for guid, entry in pairs(memoryList) do
    local obj = getObjectFromGUID(guid)

    local isMonsterGuid = false
    for i = 1, 47 do
      if monsterGuids[i] == guid then
        isMonsterGuid = true
        break
      end
    end

    --If obj is out on the table, move it to the saved pos/rot
    if isMonsterGuid then
      if obj ~= nil then
        local monsterObject = obj.takeObject({position = monsterTrackerLocations[currMonsterIndex][3]})
        spawnMonsterObjects(monsterObject, currMonsterIndex, currLevel)
        currMonsterIndex = currMonsterIndex + 1
      end
    else
      if obj ~= nil then
        if not isMonsterGuid then
          obj.setPositionSmooth(entry.pos)
          obj.setRotationSmooth(entry.rot)
          obj.setLock(entry.lock)
        end
      else
        --If obj is inside of the bag
        for _, bagObj in ipairs(bagObjList) do
          if bagObj.guid == guid then
            local item = self.takeObject({
                guid=guid, position=entry.pos, rotation=entry.rot,
            })
            item.setLock(entry.lock)
            break
          end
        end
      end
    end
  end
  broadcastToAll("Objects Placed", {1,1,1})
end

--Recalls objects to bag from table
function recallObjects()
  for guid, entry in pairs(memoryList) do
    local isGuidMonster = false
    for i = 1,47 do
      if monsterGuids[i] == guid then
        isGuidMonster = true
        break
      end
    end
    if not isGuidMonster then
      local obj = getObjectFromGUID(guid)
      if obj ~= nil then self.putObject(obj) end
    end
  end
  broadcastToAll("Objects Recalled", {1,1,1})
end

--Utility functions

--Checks or unchecks buttons
function buttonClick_selection(index, obj)
  local color = {0,1,0,0.6}
  if numberOfMonsterButtons < 8 and memoryList[obj.getGUID()] == nil then
    self.editButton({index=index, color=color})
    --Adding pos/rot to memory table
    local pos, rot = obj.getPosition(), obj.getRotation()
    --I need to add it like this or it won't save due to indexing issue
    memoryList[obj.getGUID()] = {
      pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},
      rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},
      lock=obj.getLock()
    }
    obj.highlightOn({0,1,0})
    numberOfMonsterButtons = numberOfMonsterButtons + 1
  else
    color = {0.75,0.25,0.25,0.6}
    self.editButton({index=index, color=color})
    if memoryList[obj.getGUID()] ~= nil then
      numberOfMonsterButtons = numberOfMonsterButtons - 1
      memoryList[obj.getGUID()] = nil
    end
    obj.highlightOff()
  end
end

--Checks or unchecks buttons
function mapButtonClick_selection(index, obj)
    local color = {0,1,0,0.6}
    if memoryList[obj.getGUID()] == nil then
        self.editButton({index=index, color=color})
        --Adding pos/rot to memory table
        local pos, rot = obj.getPosition(), obj.getRotation()
        --I need to add it like this or it won't save due to indexing issue
        memoryList[obj.getGUID()] = {
            pos={x=round(pos.x,4), y=round(pos.y,4), z=round(pos.z,4)},
            rot={x=round(rot.x,4), y=round(rot.y,4), z=round(rot.z,4)},
            lock=obj.getLock()
        }
        obj.highlightOn({0,1,0})
    else
        color = {0.75,0.25,0.25,0.6}
        self.editButton({index=index, color=color})
        memoryList[obj.getGUID()] = nil
        obj.highlightOff()
    end
end

function getScenarioButtonTable()
  local scenButtons = self.getButtons()
  local index = -1

  for i = 1, #scenButtons do
    if scenButtons[i].label ~= "<" and scenButtons[i].label ~= ">" then
      return scenButtons[i]
    end
  end
end

function spawnMonsterObjects(obj, currIndex, scenarioLevel)
  local objsInBag = obj.getObjects()

  local scale = {1,1,1}
  local numOfMonsters = -1
  local monsterSleeveRotation = {0,0,0}
  local monsterStatSheetRotation = {0,0,0}

  for i = 1, #monsters do
    if monsters[i].Name == obj.getName() then
      scale = monsters[i].CardScale
      numOfMonsters = monsters[i].NumOfSpawns
      monsterStatSheetRotation = monsters[i].CardRotations[scenarioLevel + 1]
      break
    end
  end

  if numOfMonsters > 6 then
    monsterSleeveRotation = {0,0,180}
  end

  for i = 1, #objsInBag do
    if objsInBag[i].name == obj.getName() then
      local monsterStatSheet = obj.takeObject({position = monsterTrackerLocations[currIndex][2], rotation = monsterStatSheetRotation})
      monsterStatSheet.setScale(scale)
      break
    end
  end

  local monsterSleeve = getObjectFromGUID("b26c16").takeObject({position = monsterTrackerLocations[currIndex][1], rotation = monsterSleeveRotation})
  monsterSleeve.setScale({0.70,1,0.70})

  getObjectFromGUID("f01091").takeObject({position = monsterTrackerLocations[currIndex][4], rotation = {0,180,0}})
end

--Find delta (difference) between 2 x/y/z coordinates
function findOffsetDistance(p1, p2, obj)
    local deltaPos = {}
    local bounds = obj.getBounds()
    deltaPos.x = (p2.x-p1.x)
    deltaPos.y = (p2.y-p1.y) + (bounds.size.y - bounds.offset.y)
    deltaPos.z = (p2.z-p1.z)
    return deltaPos
end

--Used to rotate a set of coordinates by an angle
function rotateLocalCoordinates(desiredPos, obj)
	local objPos, objRot = obj.getPosition(), obj.getRotation()
    local angle = math.rad(objRot.y)
	local x = desiredPos.x * math.cos(angle) - desiredPos.z * math.sin(angle)
	local z = desiredPos.x * math.sin(angle) + desiredPos.z * math.cos(angle)
	--return {x=objPos.x+x, y=objPos.y+desiredPos.y, z=objPos.z+z}
    return {x=x, y=desiredPos.y, z=z}
end

--Coroutine delay, in seconds
function wait(time)
    local start = os.time()
    repeat coroutine.yield(0) until os.time() > start + time
end

--Duplicates a table (needed to prevent it making reference to the same objects)
function duplicateTable(oldTable)
    local newTable = {}
    for k, v in pairs(oldTable) do
        newTable[k] = v
    end
    return newTable
end

--Moves scripted highlight from all objects
function removeAllHighlights()
    for _, obj in ipairs(getAllObjects()) do
        obj.highlightOff()
    end
end

--Round number (num) to the Nth decimal (dec)
function round(num, dec)
  local mult = 10^(dec or 0)
  return math.floor(num * mult + 0.5) / mult
end

function isItemInArea(obj)
  if obj == nil then
    return false
  end

  local pos = obj.getPosition()
  if pos.x < 12 and pos.x > -47.32 and pos.y > 1.00 and pos.z < 24.00 and pos.z > -16.72 then
    return true
  end
  return false
end